<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Doa&#39;s blog</title>
    <link>https://motal.github.io/</link>
    <description>Recent content on Doa&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <copyright>&amp;copy; 2020. All rights reserved.</copyright>
    <lastBuildDate>Wed, 16 Dec 2020 21:27:16 +0900</lastBuildDate><atom:link href="https://motal.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[코딩] 2개의 노드 비교</title>
      <link>https://motal.github.io/post/%EC%BD%94%EB%94%A9-2%EA%B0%9C%EC%9D%98-%EB%85%B8%EB%93%9C-%EB%B9%84%EA%B5%90/</link>
      <pubDate>Wed, 16 Dec 2020 21:27:16 +0900</pubDate>
      
      <guid>https://motal.github.io/post/%EC%BD%94%EB%94%A9-2%EA%B0%9C%EC%9D%98-%EB%85%B8%EB%93%9C-%EB%B9%84%EA%B5%90/</guid>
      <description>2개의 노트의 값이 같은지 비교하는 코드를 짜보자.
null 처리를 포함한 간결한 코드 작성 방법 2가지를 적는다.
1. And-Or-Value func compare(l, r *TreeNode) bool { // 2개 모두 nil 이면 같다 if l == nil &amp;amp;&amp;amp; r == nil { return true } // 위에서 2개 모두가 nil 인 경우를 이미 처리했으므로 // 하나만 nil인 경우에 해당하므로 같지 않다. if l == nil || r == nil { return false } // 최종 값 비교 return l.</description>
    </item>
    
    <item>
      <title>[알고리즘] 이진트리 In-order 순회</title>
      <link>https://motal.github.io/post/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC-inorder-%EC%88%9C%ED%9A%8C/</link>
      <pubDate>Wed, 16 Dec 2020 20:15:23 +0900</pubDate>
      
      <guid>https://motal.github.io/post/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC-inorder-%EC%88%9C%ED%9A%8C/</guid>
      <description>iterative type TreeNode struct { Val int Left *TreeNode Right *TreeNode } func inorder(root *TreeNode) { var st []*TreeNode // 처음 stack에 담지 않는다 for root != nil || len(st) &amp;gt; 0 { for root != nil { st = append(st, root) root = root.Left } root = st[len(st)-1] st = st[:len(st)-1] // pop fmt.Println(root.Val) root = root.Right } } recursive func inorder(root *TreeNode) []int { res := []int{} if root !</description>
    </item>
    
    <item>
      <title>투자용어 정리</title>
      <link>https://motal.github.io/post/%ED%88%AC%EC%9E%90%EC%9A%A9%EC%96%B4-%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Mon, 14 Dec 2020 10:22:55 +0900</pubDate>
      
      <guid>https://motal.github.io/post/%ED%88%AC%EC%9E%90%EC%9A%A9%EC%96%B4-%EC%A0%95%EB%A6%AC/</guid>
      <description>가산금리
 spread라고도 함. 금리를 정할 때 기준금리에 덧붙이는 위험가중 금리를 말함 신용이 높으면 위험이 줄어들므로 가산금리도 낮다.  명목금리
 금융자산의 액면금액에 대한 금리  실질금리
 명목금리에서 물가상승률을 뺀 금리. 실질적인 금리 (실질금리 = 명목금리 - 물가상승률) 은행에서 이자 10%를 준다고하면 명목금리가 10%이지만 그 해 물가상승률이 3%이면 실질금리는 7%가 됨 실질금리가 하락하면 기대수익이 떨어지니 금값이 뛰는 현상이 있다.  표면금리
 채권의 액면가액에 대한 연이자  외평채
 외국환평형기금채권의 약어.</description>
    </item>
    
    <item>
      <title>[알고리즘] DFS &amp; BFS 패턴</title>
      <link>https://motal.github.io/post/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-dfs-bfs-%ED%8C%A8%ED%84%B4/</link>
      <pubDate>Sun, 06 Dec 2020 10:09:23 +0900</pubDate>
      
      <guid>https://motal.github.io/post/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-dfs-bfs-%ED%8C%A8%ED%84%B4/</guid>
      <description>DFS 재귀 procedure DFS(G, v) is label v as discovered for all directed edges from v to w that are in G.adjacentEdges(v) do // 넣을 때 방문 확인 및 처리를 한다 if vertex w is not labeled as discovered then recursively call DFS(G, w) 반복 procedure DFS_iterative(G, v) is let S be a stack S.push(v) while S is not empty do v = S.pop() // 꺼낸 다음에 방문 확인 및 처리를 한다 if v is not labeled as discovered then label v as discovered for all edges from v to w in G.</description>
    </item>
    
    <item>
      <title>[알고리즘] 이진검색 패턴</title>
      <link>https://motal.github.io/post/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%9D%B4%EC%A7%84%EA%B2%80%EC%83%89-%ED%8C%A8%ED%84%B4/</link>
      <pubDate>Fri, 04 Dec 2020 13:50:34 +0900</pubDate>
      
      <guid>https://motal.github.io/post/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%9D%B4%EC%A7%84%EA%B2%80%EC%83%89-%ED%8C%A8%ED%84%B4/</guid>
      <description>이진검색을 구현하는 것은 대게 어렵지 않으나 구현할 때마다 헷갈린다.
아래와 같이 구현하면 대부분의 경우를 만족시킬 수 있다.
패턴  arr := []int{1, 1, 2, 2, 2, 4, 4, 5, 5, 5} l := 0 r := len(arr) // 배열 끝 index보다 1이 커야 한다 t := 3 // target for l &amp;lt; r { // 혹은 l != r // floor를 적용 // (l + r)/2는 overflow가 발생할 수 있음 m := l + (r-l)/2 if arr[m] &amp;lt; t { // 왼쪽 영역 + 가운데를 버리는 조건 // floor적용에 따른 무한루프 방지를 위해 left에 1을 더함 l = m + 1 } else { // 오른쪽 영역을 버리는 조건 r = m } } // t의 존재 유무가 필요한 경우 if arr[l] == t { fmt.</description>
    </item>
    
    <item>
      <title>[투자] 기업 재무제표와 손익계산서 용어 정리1</title>
      <link>https://motal.github.io/post/%ED%88%AC%EC%9E%90-%EA%B8%B0%EC%97%85-%EC%9E%AC%EB%AC%B4%EC%A0%9C%ED%91%9C%EC%99%80-%EC%86%90%EC%9D%B5%EA%B3%84%EC%82%B0%EC%84%9C-%EC%9A%A9%EC%96%B4-%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Thu, 03 Dec 2020 08:33:43 +0900</pubDate>
      
      <guid>https://motal.github.io/post/%ED%88%AC%EC%9E%90-%EA%B8%B0%EC%97%85-%EC%9E%AC%EB%AC%B4%EC%A0%9C%ED%91%9C%EC%99%80-%EC%86%90%EC%9D%B5%EA%B3%84%EC%82%B0%EC%84%9C-%EC%9A%A9%EC%96%B4-%EC%A0%95%EB%A6%AC/</guid>
      <description>기업의 재무제표와 손익계산서에 나오는 용어를 정리해보자.
재무제표 자산
 과거의 거래나 사건의 결과로서 현재 기업실체에 의해 지배되고 미래에 경제적 효익을 창출할 것으로 기대되는 자원 쉽게 설명하면, 현재 가지고 있는 돈 될 만한 자원 + 과거의 거래로 인하여 받게 될 돈 될 만한 자원  유동자산
 단기간 내에 자금으로 회수 또는 전환할 수 있는 자산. 보통 1년 이내의 것을 말함. 현금·미수금·외상 매출금·재고 상품 따위 반대는 비유동자산  부채
 과거의 거래나 사건의 결과로서 현재 기업실체에 의해 지배되고 미래에 경제적 효익의 희생 쉽게 말해 빚  유동부채</description>
    </item>
    
    <item>
      <title>[Golang] Embedding</title>
      <link>https://motal.github.io/post/golang-embedding/</link>
      <pubDate>Mon, 30 Nov 2020 11:07:30 +0900</pubDate>
      
      <guid>https://motal.github.io/post/golang-embedding/</guid>
      <description>임베딩(Embedding)에 대해 알아보자.
자바의 상속과는 달리, Golang은 임베딩을 지원한다.
Effective java를 보면 &amp;lsquo;상속 대신 조합(composition)을 하라&amp;rsquo;라고 하는데 여기의 조합과 임베딩은 유사한 개념이다.
 참고로 상속은 부모-자식간 강한 커플링을 맺게 되므로 좋지 않다. 조합은 내부 구성품에 접근하기 위한 getter/setter가 필요하지만 임베딩은 이조차 필요없이 흡수(?)가 된다는 면에서 차이가 있다.  interface와 struct 모두 임베딩이 가능하다. 단,
 interface는 interface만 포함할 수 있다. struct는 struct과 interface 둘 다 포함할 수 있다.  임베딩을 하게 되면 안쪽에 있는 메소드를 바깥쪽에서 마음데로 가져다 쓸 수 있다.</description>
    </item>
    
    <item>
      <title>[Golang] Goroutine을 이용한 분산처리</title>
      <link>https://motal.github.io/post/golang-goroutine%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%84%EC%82%B0%EC%B2%98%EB%A6%AC/</link>
      <pubDate>Sun, 29 Nov 2020 10:25:19 +0900</pubDate>
      
      <guid>https://motal.github.io/post/golang-goroutine%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%84%EC%82%B0%EC%B2%98%EB%A6%AC/</guid>
      <description>피보나치를 일꾼 4명에게 동시에 계산하도록 만들어보자.
설명  worker는 일꾼이고 모두 goroutine으로 실행된다. jobs와 results는 각각 작업들과 결과물들을 전달하는 buffered 채널이다. worker 내부에는 jobs 채널로 부터 일을 계속 수신하고 그 결과는 results 채널로 전달한다. jobs 채널에 0~99까지의 작업을 전달한다. jobs에는 총 100개의 작업을 전달하고 jobs 채널을 종료(close)한다. 메인 스레드는 results 채널에서 오는 결과를 기다리고 있다.  코드 func main() { jobs := make(chan int, 100) results := make(chan string, 100) for i := 0; i &amp;lt; 100; i++ { jobs &amp;lt;- i } close(jobs) go worker(1, jobs, results) go worker(2, jobs, results) go worker(3, jobs, results) go worker(4, jobs, results) for i := 0; i &amp;lt; 100; i++ { fmt.</description>
    </item>
    
    <item>
      <title>[Golang] Goroutine과 Channel</title>
      <link>https://motal.github.io/post/golang-goroutine%EA%B3%BC-channel/</link>
      <pubDate>Sat, 28 Nov 2020 23:30:43 +0900</pubDate>
      
      <guid>https://motal.github.io/post/golang-goroutine%EA%B3%BC-channel/</guid>
      <description>Goroutine goroutine은 경량 스레드이다.
(Green thread 혹은 light-weight thread 라고도 부른다)
 green threads are threads that are scheduled by a runtime library or virtual machine (VM) instead of natively by the underlying operating system (OS). - Wikipedia
 Channel channel은 데이터를 보내는 통로이다.
자료구조 queue의 목적으로 써도 문제가 없다.
버퍼 사이즈를 명시하지 않으면 사이즈가 0이다.
ch1 := make(chan int) // 버퍼 사이즈가 0 ch2 := make(chan int, 1024) // 버퍼 사이즈가 1024  동작 방식 처음 goroutine을 사용하다보면 아래와 같은 에러를 자주 보게 된다.</description>
    </item>
    
    <item>
      <title>[Golang] Stack과 Queue</title>
      <link>https://motal.github.io/post/golang-stack%EA%B3%BC-queue/</link>
      <pubDate>Sat, 28 Nov 2020 22:58:47 +0900</pubDate>
      
      <guid>https://motal.github.io/post/golang-stack%EA%B3%BC-queue/</guid>
      <description>Golang에서 Stack과 Queue 자료구조를 사용해보자.
다행히 Slice만으로도 두 가지 용도로 사용할 수 있다.
 Stack 코드
// push stack := []int{1, 2, 3} stack = append(stack, 4) stack = append(stack, 5, 6) fmt.Println(stack) // pop val, stack := stack[len(stack)-1], stack[:len(stack)-1] fmt.Println(stack, val)  결과
[1 2 3 4 5 6] [1 2 3 4 5] 6  Queue 코드
// enqueue queue := []int{1, 2, 3} queue = append(queue, 4) fmt.</description>
    </item>
    
    <item>
      <title>[Golang] 포인터 리시버 vs 밸류 리시버</title>
      <link>https://motal.github.io/post/golang-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EB%A6%AC%EC%8B%9C%EB%B2%84-vs-%EB%B0%B8%EB%A5%98-%EB%A6%AC%EC%8B%9C%EB%B2%84/</link>
      <pubDate>Thu, 26 Nov 2020 09:38:28 +0900</pubDate>
      
      <guid>https://motal.github.io/post/golang-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EB%A6%AC%EC%8B%9C%EB%B2%84-vs-%EB%B0%B8%EB%A5%98-%EB%A6%AC%EC%8B%9C%EB%B2%84/</guid>
      <description>Value receiver와 Pointer receiver, 2가지가 receiver가 있다.
아래와 같은 구조체가 있다고 가정하고
type Person struct { Name string } Value receiver의 예
func (p Person) String() string { return p.Name + &amp;quot;!!!&amp;quot; } Pointer receiver의 예
func (p *Person) String() string { return p.Name + &amp;quot;!!!&amp;quot; } 두 가지 receiver를 언제 어떻게 사용해야하는지 헷갈려서 공부한 내용을 기록한다.
 우선 아래의 원칙을 알아야 한다.
원칙1. 둘 중에 한 가지만 정의할 수 있다.</description>
    </item>
    
    <item>
      <title>대한민국 사회적 문제들</title>
      <link>https://motal.github.io/post/%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD-%EC%82%AC%ED%9A%8C%EC%A0%81-%EB%AC%B8%EC%A0%9C%EB%93%A4/</link>
      <pubDate>Tue, 24 Nov 2020 07:13:24 +0900</pubDate>
      
      <guid>https://motal.github.io/post/%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD-%EC%82%AC%ED%9A%8C%EC%A0%81-%EB%AC%B8%EC%A0%9C%EB%93%A4/</guid>
      <description>가정 폭력을 당하는 아이들 부모로부터 받는 학대를 받는 아이들이 많이 있지만 조기에 발견하기가 어렵다. 폭력을 당한 주체가 어리고 남에게 도움을 구하기 어렵기 때문이다.
취업이 어려운 20/30대 취업이 어려운 이유는 채용하는 기업의 수가 줄어서이다. 좋은 학교를 졸업해도 아르바이트와 인턴, 비정규직 일자리에 전전하게 된다. 이는 혼인과 출산에 영향을 미처 더 큰 사회적 문제를 야기한다.
운영이 힘든 자영업 사장님 최저임금의 급격한 증가와 주 52시간 근무제 도입, COVID-19로 인한 방문객의 감소로 많은 자영업 사장님들은 이미 한계에 봉착했거나 힘들게 사업을 운영해나가고 있다.</description>
    </item>
    
    <item>
      <title>왜 Go를 사용하는가</title>
      <link>https://motal.github.io/post/%EC%99%9C-go%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B0%80/</link>
      <pubDate>Mon, 23 Nov 2020 12:18:39 +0900</pubDate>
      
      <guid>https://motal.github.io/post/%EC%99%9C-go%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B0%80/</guid>
      <description>1. 간단하다.  25개 키워드. 끝. (https://golang.org/ref/spec#Keywords) Java 49개 (https://www.geeksforgeeks.org/list-of-all-java-keywords/) c++17 84개 (https://boycoding.tistory.com/140) =&amp;gt; 배우기 쉽고 읽기도 쉽다.  2. 성능이 좋다  Java 대비 빠른 실행속도 및 훨씬 적은 메모리 사용 (https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/go.html) binary 빌드 &amp;amp; 배포가능. no runtime environment! =&amp;gt; 서버 운영비용 감소  3. 훌륭한 생태계  docker, kubernetes, prometheus와 같은 유명한 SW존재 오픈소스도 활발하게 개발되고 있음 Google (https://github.com/google) Netflix (https://github.com/Netflix) Grab (https://github.com/grab) Uber (https://github.com/uber) Golang Korea (https://web.facebook.com/groups/golangko/) 관심도 증가 중(https://trends.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://motal.github.io/about/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/about/</guid>
      <description>참 오래 됐나봐 이 말조차 무색할만큼 니 눈빛만 봐도 널 훤히 다 아는 니 친구 처럼 너의 그림자 처럼
늘 함께 했나봐 니가 힘들때나 슬플때 외로워 할때도 또 이별 앓고서 아파할때도 니 눈물 닦아준
한 남자가 있어 널 너무 사랑한 한 남자가 있어 사랑해 말도 못하는 니 곁에 손 내밀면 꼭 닿을 거리에 자신보다 아끼는 널 가진 내가 있어
너를 웃게 하는 일 오직 그것만 생각하고 언제 어디서나 너를 바라보고 널 그리워하고 니 걱정만 하는</description>
    </item>
    
    <item>
      <title>Code Format Test</title>
      <link>https://motal.github.io/post/code-format-test/</link>
      <pubDate>Mon, 23 Nov 2020 07:32:03 +0900</pubDate>
      
      <guid>https://motal.github.io/post/code-format-test/</guid>
      <description>코드 코드 포맷이 잘 적용되는지 테스트 해본다.
package main import &amp;quot;fmt&amp;quot; func main() { fmt.Println(&amp;quot;만나서 반갑습니다&amp;quot;) }  리스트 리스트가 잘 되는지 확인해본다.
 사과 바나나 포도  링크 링크가 잘 되는지 테스트해본다.
 구글 네이버  </description>
    </item>
    
    <item>
      <title>처음 글</title>
      <link>https://motal.github.io/post/the-beginning/</link>
      <pubDate>Sun, 22 Nov 2020 23:31:56 +0900</pubDate>
      
      <guid>https://motal.github.io/post/the-beginning/</guid>
      <description>처음 글 hugo를 이용하여 처음으로 글 써본다.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://motal.github.io/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://motal.github.io/contact/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/contact/</guid>
      <description> &amp;lt;div class=&amp;quot;pure-u-1 pure-u-md-1-3&amp;quot;&amp;gt; &amp;lt;label for=&amp;quot;last-name&amp;quot;&amp;gt;Last Name&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;last-name&amp;quot; class=&amp;quot;pure-u-23-24&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;pure-u-1 pure-u-md-1-3&amp;quot;&amp;gt; &amp;lt;label for=&amp;quot;email&amp;quot;&amp;gt;E-Mail&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;email&amp;quot; class=&amp;quot;pure-u-23-24&amp;quot; type=&amp;quot;email&amp;quot; required&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;pure-u-1 pure-u-md-1-3&amp;quot;&amp;gt; &amp;lt;label for=&amp;quot;city&amp;quot;&amp;gt;City&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;city&amp;quot; class=&amp;quot;pure-u-23-24&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;pure-u-1 pure-u-md-1-3&amp;quot;&amp;gt; &amp;lt;label for=&amp;quot;state&amp;quot;&amp;gt;State&amp;lt;/label&amp;gt; &amp;lt;select id=&amp;quot;state&amp;quot; class=&amp;quot;pure-input-1-2&amp;quot;&amp;gt; &amp;lt;option&amp;gt;AL&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;CA&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;IL&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;fieldset class=&amp;quot;pure-group&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;pure-input-1-2&amp;quot; placeholder=&amp;quot;A title&amp;quot;&amp;gt; &amp;lt;textarea class=&amp;quot;pure-input-1-2&amp;quot; placeholder=&amp;quot;Your message&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt; &amp;lt;/fieldset&amp;gt; &amp;lt;button type=&amp;quot;submit&amp;quot; class=&amp;quot;pure-button pure-button-primary&amp;quot;&amp;gt;Send&amp;lt;/button&amp;gt;  </description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://motal.github.io/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/post/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://motal.github.io/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://motal.github.io/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>
