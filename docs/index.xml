<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Doa&#39;s blog</title>
    <link>https://motal.github.io/</link>
    <description>Recent content on Doa&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <copyright>&amp;copy; 2020. All rights reserved.</copyright>
    <lastBuildDate>Thu, 26 Nov 2020 09:38:28 +0900</lastBuildDate><atom:link href="https://motal.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Golang] 포인터 리시버 vs 밸류 리시버</title>
      <link>https://motal.github.io/post/golang-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EB%A6%AC%EC%8B%9C%EB%B2%84-vs-%EB%B0%B8%EB%A5%98-%EB%A6%AC%EC%8B%9C%EB%B2%84/</link>
      <pubDate>Thu, 26 Nov 2020 09:38:28 +0900</pubDate>
      
      <guid>https://motal.github.io/post/golang-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EB%A6%AC%EC%8B%9C%EB%B2%84-vs-%EB%B0%B8%EB%A5%98-%EB%A6%AC%EC%8B%9C%EB%B2%84/</guid>
      <description>Value receiver와 Pointer receiver, 2가지가 receiver가 있다.
아래와 같은 구조체가 있다고 가정하고
type Person struct { Name string } Value receiver의 예
func (p Person) String() string { return p.Name + &amp;quot;!!!&amp;quot; } Pointer receiver의 예
func (p *Person) String() string { return p.Name + &amp;quot;!!!&amp;quot; } 두 가지 receiver를 언제 어떻게 사용해야하는지 헷갈려서 공부한 내용을 기록한다.
 우선 아래의 원칙을 알아야 한다.
원칙1. 둘 중에 한 가지만 정의할 수 있다.</description>
    </item>
    
    <item>
      <title>대한민국 사회적 문제들</title>
      <link>https://motal.github.io/post/%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD-%EC%82%AC%ED%9A%8C%EC%A0%81-%EB%AC%B8%EC%A0%9C%EB%93%A4/</link>
      <pubDate>Tue, 24 Nov 2020 07:13:24 +0900</pubDate>
      
      <guid>https://motal.github.io/post/%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD-%EC%82%AC%ED%9A%8C%EC%A0%81-%EB%AC%B8%EC%A0%9C%EB%93%A4/</guid>
      <description>가정 폭력을 당하는 아이들 부모로부터 받는 학대를 받는 아이들이 많이 있지만 조기에 발견하기가 어렵다. 폭력을 당한 주체가 어리고 남에게 도움을 구하기 어렵기 때문이다.
취업이 어려운 20/30대 취업이 어려운 이유는 채용하는 기업의 수가 줄어서이다. 좋은 학교를 졸업해도 아르바이트와 인턴, 비정규직 일자리에 전전하게 된다. 이는 혼인과 출산에 영향을 미처 더 큰 사회적 문제를 야기한다.
운영이 힘든 자영업 사장님 최저임금의 급격한 증가와 주 52시간 근무제 도입, COVID-19로 인한 방문객의 감소로 많은 자영업 사장님들은 이미 한계에 봉착했거나 힘들게 사업을 운영해나가고 있다.</description>
    </item>
    
    <item>
      <title>왜 Go를 사용하는가</title>
      <link>https://motal.github.io/post/%EC%99%9C-go%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B0%80/</link>
      <pubDate>Mon, 23 Nov 2020 12:18:39 +0900</pubDate>
      
      <guid>https://motal.github.io/post/%EC%99%9C-go%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B0%80/</guid>
      <description>1. 간단하다.  25개 키워드. 끝. (https://golang.org/ref/spec#Keywords) Java 49개 (https://www.geeksforgeeks.org/list-of-all-java-keywords/) c++17 84개 (https://boycoding.tistory.com/140) =&amp;gt; 배우기 쉽고 읽기도 쉽다.  2. 성능이 좋다  Java 대비 빠른 실행속도 및 훨씬 적은 메모리 사용 (https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/go.html) binary 빌드 &amp;amp; 배포가능. no runtime environment! =&amp;gt; 서버 운영비용 감소  3. 훌륭한 생태계  docker, kubernetes, prometheus와 같은 유명한 SW존재 오픈소스도 활발하게 개발되고 있음 Google (https://github.com/google) Netflix (https://github.com/Netflix) Grab (https://github.com/grab) Uber (https://github.com/uber) Golang Korea (https://web.facebook.com/groups/golangko/) 관심도 증가 중(https://trends.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://motal.github.io/about/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/about/</guid>
      <description>참 오래 됐나봐 이 말조차 무색할만큼 니 눈빛만 봐도 널 훤히 다 아는 니 친구 처럼 너의 그림자 처럼
늘 함께 했나봐 니가 힘들때나 슬플때 외로워 할때도 또 이별 앓고서 아파할때도 니 눈물 닦아준
한 남자가 있어 널 너무 사랑한 한 남자가 있어 사랑해 말도 못하는 니 곁에 손 내밀면 꼭 닿을 거리에 자신보다 아끼는 널 가진 내가 있어
너를 웃게 하는 일 오직 그것만 생각하고 언제 어디서나 너를 바라보고 널 그리워하고 니 걱정만 하는</description>
    </item>
    
    <item>
      <title>Code Format Test</title>
      <link>https://motal.github.io/post/code-format-test/</link>
      <pubDate>Mon, 23 Nov 2020 07:32:03 +0900</pubDate>
      
      <guid>https://motal.github.io/post/code-format-test/</guid>
      <description>코드 코드 포맷이 잘 적용되는지 테스트 해본다.
package main import &amp;quot;fmt&amp;quot; func main() { fmt.Println(&amp;quot;만나서 반갑습니다&amp;quot;) }  리스트 리스트가 잘 되는지 확인해본다.
 사과 바나나 포도  링크 링크가 잘 되는지 테스트해본다.
 구글 네이버  </description>
    </item>
    
    <item>
      <title>처음 글</title>
      <link>https://motal.github.io/post/the-beginning/</link>
      <pubDate>Sun, 22 Nov 2020 23:31:56 +0900</pubDate>
      
      <guid>https://motal.github.io/post/the-beginning/</guid>
      <description>처음 글 hugo를 이용하여 처음으로 글 써본다.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://motal.github.io/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://motal.github.io/contact/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/contact/</guid>
      <description> &amp;lt;div class=&amp;quot;pure-u-1 pure-u-md-1-3&amp;quot;&amp;gt; &amp;lt;label for=&amp;quot;last-name&amp;quot;&amp;gt;Last Name&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;last-name&amp;quot; class=&amp;quot;pure-u-23-24&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;pure-u-1 pure-u-md-1-3&amp;quot;&amp;gt; &amp;lt;label for=&amp;quot;email&amp;quot;&amp;gt;E-Mail&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;email&amp;quot; class=&amp;quot;pure-u-23-24&amp;quot; type=&amp;quot;email&amp;quot; required&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;pure-u-1 pure-u-md-1-3&amp;quot;&amp;gt; &amp;lt;label for=&amp;quot;city&amp;quot;&amp;gt;City&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;city&amp;quot; class=&amp;quot;pure-u-23-24&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;pure-u-1 pure-u-md-1-3&amp;quot;&amp;gt; &amp;lt;label for=&amp;quot;state&amp;quot;&amp;gt;State&amp;lt;/label&amp;gt; &amp;lt;select id=&amp;quot;state&amp;quot; class=&amp;quot;pure-input-1-2&amp;quot;&amp;gt; &amp;lt;option&amp;gt;AL&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;CA&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;IL&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;fieldset class=&amp;quot;pure-group&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;pure-input-1-2&amp;quot; placeholder=&amp;quot;A title&amp;quot;&amp;gt; &amp;lt;textarea class=&amp;quot;pure-input-1-2&amp;quot; placeholder=&amp;quot;Your message&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt; &amp;lt;/fieldset&amp;gt; &amp;lt;button type=&amp;quot;submit&amp;quot; class=&amp;quot;pure-button pure-button-primary&amp;quot;&amp;gt;Send&amp;lt;/button&amp;gt;  </description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://motal.github.io/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/post/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://motal.github.io/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://motal.github.io/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>
