<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Doa&#39;s blog</title>
    <link>https://motal.github.io/post/</link>
    <description>Recent content in Posts on Doa&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <copyright>&amp;copy; 2020. All rights reserved.</copyright>
    <lastBuildDate>Mon, 23 Nov 2020 07:32:03 +0900</lastBuildDate><atom:link href="https://motal.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Code Format Test</title>
      <link>https://motal.github.io/post/code-format-test/</link>
      <pubDate>Mon, 23 Nov 2020 07:32:03 +0900</pubDate>
      
      <guid>https://motal.github.io/post/code-format-test/</guid>
      <description>코드 코드 포맷이 잘 적용되는지 테스트 해본다.
package main import &amp;quot;fmt&amp;quot; func main() { fmt.Println(&amp;quot;만나서 반갑습니다&amp;quot;) }  리스트 리스트가 잘 되는지 확인해본다.
 사과 바나나 포도  링크 링크가 잘 되는지 테스트해본다.
 구글 네이버  </description>
    </item>
    
    <item>
      <title>처음 글</title>
      <link>https://motal.github.io/post/the-beginning/</link>
      <pubDate>Sun, 22 Nov 2020 23:31:56 +0900</pubDate>
      
      <guid>https://motal.github.io/post/the-beginning/</guid>
      <description>처음 글 hugo를 이용하여 처음으로 글 써본다.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://motal.github.io/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://motal.github.io/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/post/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://motal.github.io/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://motal.github.io/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://motal.github.io/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>
